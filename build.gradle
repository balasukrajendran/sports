import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
    }
}
plugins{
    id 'io.qameta.allure' version '2.8.1'
}

ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome", "iexplore","safari"]


    ext {
        groovyVersion = '2.4.1'
        gebVersion = '1.1.1'
        seleniumVersion = '3.11.0'
        chromeDriverVersion = '2.46'
    }
}
apply plugin: "java"
apply plugin: "groovy"
apply plugin: "application"
apply plugin: "codenarc"
apply plugin: 'com.bmuschko.tomcat'


apply from: "gradle/idea.gradle"
apply from: "gradle/ci.gradle"



repositories {

    jcenter()
    maven { url 'http://repo1.maven.org/maven2'}
    maven { url 'https://artifactory/artifactory/libs-release/' }
}

task wrapper(type: Wrapper) {

    gradleVersion = '3.5.1'

}

tomcat {
    httpPort = 9080
}

dependencies {

    // Geb Spock Reports
    testCompile 'com.aoe:geb-spock-reports:0.1.5'

    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"


    // required spock libraries
    testCompile ("org.spockframework:spock-core:1.3-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }

    // Groovy dependencies
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"

    //Apache Commons Utility
    testCompile "org.apache.commons:commons-lang3:3.4"

    // Drivers
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-ie-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-safari-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-edge-driver:3.141.59"
    testCompile("com.github.detro.ghostdriver:phantomjsdriver:1.1.0") {
        transitive = false
    }


    testCompile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '4.4.3'

    // Selenium API
    testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"

    // Selenium Support
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"

    // Hamcrest Support
    testCompile "org.hamcrest:hamcrest-all:1.3"

    // Groovy Rest Client Support
    testCompile group: "org.codehaus.groovy.modules.http-builder", name: "http-builder", version: "0.7.1"
    testCompile group: "junit", name: "junit", version: "4.11"
    testCompile group: "joda-time", name: "joda-time", version: "2.5"

    //  Groovy-based DSL library for working with remote servers through SSH (https://github.com/aestasit/sshoogr)
    compile group: 'com.aestasit.infrastructure.sshoogr', name: 'sshoogr', version: '0.9.26'

    // Appium Lib Support
    testCompile "io.appium:java-client:2.2.0"

    // Extent Reports Support
    testCompile "com.aventstack:extentreports:3.1.5"


    // SL4J Logging
    testCompile group: 'org.slf4j', name:'slf4j-api', version: '1.7.2'

    // H2 DB Drivers
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.190'

//    // SQL & MySQL DB Drivers
//    testCompile "com.microsoft.sqlserver:sqljdbc4:4.0"
//    testCompile "net.sourceforge.jtds:jtds:1.2.7"
//    testCompile group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'

    // Rest Assured Libraries
//    testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.7'

    //  Groovy-based DSL library for working with remote servers through SSH (https://github.com/aestasit/sshoogr)
    compile group: 'com.aestasit.infrastructure.sshoogr', name: 'sshoogr', version: '0.9.26'

    testCompile fileTree(dir: 'libs', include: ['*.jar'])

}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {

        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver
    }
}

chromeTest {

}


tasks.withType(Test) {
    outputs.upToDateWhen { false }  // Always run tests
    String reportsBaseDir = "$buildDir/reports/$name-geb"

    // gradle reports
    systemProperty "geb.build.reportsDir", reportsBaseDir + "/gradle"

    // spock reports
    systemProperty 'com.athaydes.spockframework.report.enabled', "true"
    systemProperty 'com.athaydes.spockframework.report.showCodeBlocks', 'true'
    systemProperty 'com.athaydes.spockframework.report.outputDir', reportsBaseDir + "/spock"

    systemProperty "geb.build.baseUrl", System.getProperty("geb.build.baseUrl", "https://www.sportsbet.com.au/")
    systemProperty "geb.build.isStandalone", System.getProperty("geb.build.isStandalone", "true")

}

test {
    systemProperty "geb.env", System.getProperty("geb.env", "chrome") // default to Chrome
}

task deleteTestResults(type: Delete) {
    delete fileTree('build/test-results') {
        include '**/*.*'
    }
    delete fileTree('reports') {
        include '**/*.*'
    }
    delete fileTree('logs') {
        include '**/*.txt'
    }
}

//Task allureReport for generating Allure Reports
allure {
    autoconfigure = false
    aspectjweaver = true
    version = '2.13.5'
    downloadLinkFormat = 'https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/%s/allure-commandline-%<s.zip'
    clean = true
}

/****************************************************************************/
/****************************************************************************/
